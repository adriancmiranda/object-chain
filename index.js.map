{"version":3,"file":"index.js","sources":["node_modules/describe-type/source/is/array.js","node_modules/describe-type/source/is/arraylike.js","index.next.js"],"sourcesContent":["/**\n *\n * @function\n * @memberof is\n * @param {any} value\n * @returns {Boolean}\n */\nexport default function array(value) {\n\tif (value == null) return false;\n\treturn value.constructor === Array;\n}\n","import array from './array.js';\nimport string from './string.js';\n\n/**\n *\n * @function\n * @memberof is\n * @param {any} value\n * @returns {Boolean}\n */\nexport default function arraylike(value) {\n\treturn array(value) || string(value) || (\n\t\t(!!value && typeof value === 'object' && typeof value.length === 'number') &&\n\t\t(value.length === 0 || (value.length > 0 && (value.length - 1) in value))\n\t);\n}\n","import callable from 'describe-type/source/is/callable.js';\nimport string from 'describe-type/source/is/string.js';\nimport apply from 'describe-type/source/@/apply.js';\n\nconst slice = Function.call.bind(Array.prototype.slice);\nconst setPrototypeOf = Object.setPrototypeOf;\nconst defineProps = Object.defineProperties;\nconst create = Object.create;\nconst keys = Object.keys;\n\nexport default (rules, middleware) => {\n\tfunction applyRules() {\n\t\tconst pattern = this.rules.reduce((acc, rule) => {\n\t\t\tif (callable(rules[rule])) {\n\t\t\t\tconst result = apply(rules[rule], this, [acc].concat(slice(this.args[rule])));\n\t\t\t\tif (string(result)) acc += result;\n\t\t\t\telse return result;\n\t\t\t} else {\n\t\t\t\tacc += rules[rule];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, '');\n\t\treturn middleware ? apply(middleware, this, [pattern, arguments], true) : pattern;\n\t}\n\n\tfunction build(rules, args) {\n\t\tfunction builder() { return apply(applyRules, builder, arguments); }\n\t\tbuilder.rules = rules;\n\t\tbuilder.args = args;\n\t\tsetPrototypeOf(builder, proto);\n\t\treturn builder;\n\t}\n\n\tconst expressions = keys(rules).reduce((acc, rule) => {\n\t\tconst isfn = callable(rules[rule]);\n\t\tacc[rule] = { [isfn ? 'value' : 'get']: function append() {\n\t\t\tif (isfn === false) return build(this.rules.concat(rule), this.args);\n\t\t\tthis.args[rule] = arguments;\n\t\t\treturn build(this.rules.concat(rule), this.args);\n\t\t}};\n\t\treturn acc;\n\t}, create(null));\n\n\tconst proto = defineProps(function match() {}, expressions);\n\treturn defineProps({ rules }, keys(expressions).reduce((acc, rule) => {\n\t\tconst isfn = callable(rules[rule]);\n\t\tacc[rule] = { [isfn ? 'value' : 'get']: function ground() {\n\t\t\treturn build([rule], arguments);\n\t\t}};\n\t\treturn acc;\n\t}, create(null)));\n};\n"],"names":["array"],"mappings":";;;;;;;;;;;;;;;oTAOe,CAAA,kDCIPA,CAAAA,8+BCC4B,CAAA,sQAqBI,CAAA,6DAEE,CAAA,yIAQf,CAAA,gDAC6B,CAAA,6DAEd,CAAA"}
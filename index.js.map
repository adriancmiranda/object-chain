{"version":3,"file":"index.js","sources":["node_modules/describe-type/source/is/array.js","node_modules/describe-type/source/is/arraylike.js","index.next.js"],"sourcesContent":["/**\n *\n * @function\n * @memberof is\n * @param {any} value\n * @returns {Boolean}\n */\nexport default function array(value) {\n\tif (value == null) return false;\n\treturn value.constructor === Array;\n}\n","import array from './array.js';\nimport string from './string.js';\n\n/**\n *\n * @function\n * @memberof is\n * @param {any} value\n * @returns {Boolean}\n */\nexport default function arraylike(value) {\n\treturn array(value) || string(value) || (\n\t\t(!!value && typeof value === 'object' && typeof value.length === 'number') &&\n\t\t(value.length === 0 || (value.length > 0 && (value.length - 1) in value))\n\t);\n}\n","import callable from 'describe-type/source/is/callable.js';\nimport string from 'describe-type/source/is/string.js';\nimport undef from 'describe-type/source/is/undef.js';\nimport apply from 'describe-type/source/@/apply.js';\n\nconst slice = Function.call.bind(Array.prototype.slice);\nconst setPrototypeOf = Object.setPrototypeOf;\nconst defineProps = Object.defineProperties;\nconst create = Object.create;\nconst keys = Object.keys;\n\nexport default (rules, middleware) => {\n  function applyRules() {\n    const pattern = this.rules.reduce((acc, rule) => {\n      if (callable(rules[rule])) {\n        const args = slice(this.args[rule]);\n        const result = apply(rules[rule], this, [acc].concat(args));\n        if (string(result)) acc += result;\n        else return result;\n      } else {\n        acc += rules[rule];\n      }\n      return acc;\n    }, '');\n    return middleware ? apply(middleware, this, [pattern, arguments], true) : pattern;\n  }\n\n  function build(rules, args) {\n    function builder() { return apply(applyRules, builder, arguments); }\n    builder.rules = rules;\n    builder.args = args;\n    setPrototypeOf(builder, proto);\n    return builder;\n  }\n\n  const expressions = keys(rules).reduce((acc, rule) => {\n    const isfn = callable(rules[rule]);\n    acc[rule] = { [isfn ? 'value' : 'get']: function append() {\n      if (undef(this.args)) this.args = [];\n      if (isfn) this.args[rule] = arguments;\n      return build(this.rules.concat(rule), this.args);\n    }};\n    return acc;\n  }, create(null));\n\n  const proto = defineProps(function match() {}, expressions);\n  return defineProps({ rules }, keys(expressions).reduce((acc, rule) => {\n    const isfn = callable(rules[rule]);\n    acc[rule] = { [isfn ? 'value' : 'get']: function ground() {\n      if (undef(this.args)) this.args = [];\n      if (isfn) this.args[rule] = arguments;\n      return build([rule], this.args);\n    }};\n    return acc;\n  }, create(null)));\n};\n"],"names":["array"],"mappings":";;;;;;;;;;;;;;;oVAOe,CAAA,kDCIPA,CAAAA,8+BCE8B,CAAA,0QAsBG,CAAA,6DAEG,CAAA,iIAQhB,CAAA,gDAC6B,CAAA,6DAEb,CAAA"}